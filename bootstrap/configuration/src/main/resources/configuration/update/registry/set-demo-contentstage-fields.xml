<?xml version="1.0" encoding="UTF-8"?>
<sv:node sv:name="Set Demo ContentStage Fields" xmlns:sv="http://www.jcp.org/jcr/sv/1.0">
  <sv:property sv:name="jcr:primaryType" sv:type="Name">
    <sv:value>hipposys:updaterinfo</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:batchsize" sv:type="Long">
    <sv:value>10</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:description" sv:type="String">
    <sv:value>Sets ContentStage fields in blog article, news article, event, product,  simple document and review documents for demonstration purpose by randomly selecting a value from the parameters only when the document doesn't have ContentStage field yet.</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:dryrun" sv:type="Boolean">
    <sv:value>true</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:parameters" sv:type="String">
    <sv:value>{&#xd;
  "contentStageCDF": [&#xd;
    { "value" : "", "cdf": 0.2 },&#xd;
    { "value" : "none", "cdf": 0.36 },&#xd;
    { "value" : "awareness", "cdf": 0.52 },&#xd;
    { "value" : "interest", "cdf": 0.68 },&#xd;
    { "value" : "desire", "cdf": 0.84 },&#xd;
    { "value" : "action", "cdf": 1.0 }&#xd;
  ]&#xd;
}</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:query" sv:type="String">
    <sv:value>/jcr:root/content/documents//element(*,hippostdpubwf:document)[@jcr:primaryType='hippogogreen:newsitem' or @jcr:primaryType='hippogogreen:blogitem' or @jcr:primaryType='hippogogreen:event' or @jcr:primaryType='hippogogreen:product' or @jcr:primaryType='hippogogreen:simpledocument' or @jcr:primaryType='hippogogreen:review']/..</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:script" sv:type="String">
    <sv:value>package org.hippoecm.frontend.plugins.cms.admin.updater&#xd;
&#xd;
import org.onehippo.repository.update.BaseNodeUpdateVisitor&#xd;
import javax.jcr.Node&#xd;
import org.apache.commons.lang.math.RandomUtils&#xd;
&#xd;
class UpdaterTemplate extends BaseNodeUpdateVisitor {&#xd;
&#xd;
  def contentStageCDF&#xd;
&#xd;
  void initialize(Session session) {&#xd;
    contentStageCDF = parametersMap.get("contentStageCDF")&#xd;
  }&#xd;
&#xd;
  boolean doUpdate(Node node) {&#xd;
    log.debug "Visiting document handle node at ${node.path}"&#xd;
    def updated = false&#xd;
    def variants = []&#xd;
    &#xd;
    node.getNodes(node.getName()).each { variant -&gt;&#xd;
      if (!variant.hasProperty("hippogogreen:contentstage")) {&#xd;
        variants.push(variant)&#xd;
      }&#xd;
    }&#xd;
&#xd;
    if (variants.size() &gt; 0) {&#xd;
      def contentStage = ""&#xd;
      def pvalue = RandomUtils.nextFloat()&#xd;
&#xd;
      for (def item : contentStageCDF) {&#xd;
        if (item.cdf &gt;= pvalue) {&#xd;
          contentStage = item.value&#xd;
          break;&#xd;
        }&#xd;
      }&#xd;
&#xd;
      log.debug "Setting contentStage field to '${contentStage}' at ${node.path}."&#xd;
      variants.each { variant -&gt;&#xd;
        variant.setProperty("hippogogreen:contentstage", contentStage)&#xd;
        updated = true&#xd;
      }&#xd;
    }&#xd;
&#xd;
    return updated&#xd;
  }&#xd;
&#xd;
  boolean undoUpdate(Node node) {&#xd;
    throw new UnsupportedOperationException('Updater does not implement undoUpdate method')&#xd;
  }&#xd;
&#xd;
}</sv:value>
  </sv:property>
  <sv:property sv:name="hipposys:throttle" sv:type="Long">
    <sv:value>1000</sv:value>
  </sv:property>
</sv:node>
